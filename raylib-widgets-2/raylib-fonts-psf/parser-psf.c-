#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#define PSF2_MAGIC 0x864ab572  // Магічне число для PSF2 файлів, використовується для перевірки формату

// Структура заголовку PSF2 шрифту, описує основні параметри файлу
typedef struct {
    uint32_t magic;       // Магічне число PSF2 (має дорівнювати PSF2_MAGIC)
    uint32_t version;     // Версія формату (зазвичай 0)
    uint32_t headersize;  // Розмір заголовку в байтах
    uint32_t flags;       // Прапори (не завжди використовуються)
    uint32_t length;      // Кількість гліфів (символів) у шрифті
    uint32_t charsize;    // Розмір одного гліфа (bitmap) у байтах
    uint32_t height;      // Висота гліфа в пікселях
    uint32_t width;       // Ширина гліфа в пікселях
} psf2_header_t;

/**
 * Функція декодування UTF-8 послідовності у Unicode codepoint.
 *
 * @param buf Вказівник на масив байтів UTF-8 послідовності.
 * @param buflen Довжина масиву (максимальна кількість байтів для декодування).
 * @param out_cp Вказівник на змінну, куди буде записаний розкодований Unicode codepoint.
 *
 * @return Кількість байтів, які було прочитано з buf для одного символу UTF-8.
 *         Якщо послідовність некоректна, повертає 0.
 *
 * Пояснення:
 * - UTF-8 кодує символи від 1 до 4 байтів.
 * - Функція перевіряє перший байт, визначає довжину послідовності,
 *   і розкодовує символ у 32-бітне число Unicode.
 */
int utf8_decode(const unsigned char *buf, int buflen, uint32_t *out_cp) {
    if (buflen == 0) return 0;  // Якщо довжина 0 — нічого декодувати

    unsigned char c = buf[0];

    if (c < 0x80) {
        // Однобайтовий символ ASCII (0xxxxxxx)
        *out_cp = c;
        return 1;
    } else if ((c & 0xE0) == 0xC0 && buflen >= 2) {
        // Двобайтовий символ (110xxxxx 10xxxxxx)
        *out_cp = ((c & 0x1F) << 6) | (buf[1] & 0x3F);
        return 2;
    } else if ((c & 0xF0) == 0xE0 && buflen >= 3) {
        // Трибайтовий символ (1110xxxx 10xxxxxx 10xxxxxx)
        *out_cp = ((c & 0x0F) << 12) | ((buf[1] & 0x3F) << 6) | (buf[2] & 0x3F);
        return 3;
    } else if ((c & 0xF8) == 0xF0 && buflen >= 4) {
        // Чотирибайтовий символ (11110xxx 10xxxxxx 10xxxxxx 10xxxxxx)
        *out_cp = ((c & 0x07) << 18) | ((buf[1] & 0x3F) << 12) | ((buf[2] & 0x3F) << 6) | (buf[3] & 0x3F);
        return 4;
    }

    // Некоректна UTF-8 послідовність
    return 0;
}

int main(int argc, char **argv) {
    // Перевірка аргументів командного рядка
    if (argc != 2) {
        fprintf(stderr, "Використання: %s <psf2-файл>\n", argv[0]);
        return 1;
    }

    // Відкриваємо файл шрифту у двійковому режимі
    FILE *f = fopen(argv[1], "rb");
    if (!f) {
        perror("Не вдалося відкрити файл");
        return 1;
    }

    // Читаємо заголовок PSF2
    psf2_header_t header;
    if (fread(&header, sizeof(header), 1, f) != 1) {
        fprintf(stderr, "Не вдалося прочитати заголовок\n");
        fclose(f);
        return 1;
    }

    // Перевіряємо магічне число — чи це дійсно PSF2 файл
    if (header.magic != PSF2_MAGIC) {
        fprintf(stderr, "Це не PSF2 файл\n");
        fclose(f);
        return 1;
    }

    // Обчислюємо позицію початку таблиці Unicode mapping
    // Вона йде після заголовку і блоку гліфів (bitmap)
    long offset = header.headersize + (long)header.length * header.charsize;

    // Переходимо до позиції Unicode mapping у файлі
    if (fseek(f, offset, SEEK_SET) != 0) {
        fprintf(stderr, "Помилка переходу до Unicode mapping\n");
        fclose(f);
        return 1;
    }

    // Вивід заголовку таблиці
    printf("Індекс гліфа | Unicode код (U+XXXX)\n");
    printf("-----------------------------------\n");

    // Ітеруємо по кожному гліфу (символу) у шрифті
    for (uint32_t glyph_index = 0; glyph_index < header.length; glyph_index++) {
        int end_of_glyph = 0;  // прапорець кінця списку Unicode кодів для поточного гліфа

        // Зчитуємо всі Unicode коди для поточного гліфа,
        // поки не зустрінемо байт 0xFF — кінець списку для гліфа
        while (!end_of_glyph) {
            unsigned char buf[4];  // буфер для UTF-8 послідовності (максимум 4 байти)
            int cp_len = 0;        // довжина UTF-8 послідовності в байтах
            uint32_t codepoint = 0; // розкодований Unicode код символу

            // Читаємо один байт з файлу
            int c = fgetc(f);
            if (c == EOF) {
                // Кінець файлу — припиняємо роботу
                fclose(f);
                return 0;
            }

            if (c == 0xFF) {
                // 0xFF — кінець списку Unicode кодів для поточного гліфа
                end_of_glyph = 1;
                continue;  // переходимо до наступного гліфа
            }

            // Перший байт UTF-8 символу
            buf[0] = (unsigned char)c;

            // Визначаємо довжину UTF-8 послідовності за першим байтом
            if ((buf[0] & 0x80) == 0) {
                // ASCII символ (1 байт)
                cp_len = 1;
            } else if ((buf[0] & 0xE0) == 0xC0) {
                // 2-байтовий UTF-8 символ
                cp_len = 2;
            } else if ((buf[0] & 0xF0) == 0xE0) {
                // 3-байтовий UTF-8 символ
                cp_len = 3;
            } else if ((buf[0] & 0xF8) == 0xF0) {
                // 4-байтовий UTF-8 символ
                cp_len = 4;
            } else {
                // Некоректний початковий байт UTF-8
                fprintf(stderr, "Невірний UTF-8 початковий байт: 0x%X\n", buf[0]);
                fclose(f);
                return 1;
            }

            // Читаємо залишок UTF-8 послідовності (окрім першого байта)
            for (int i = 1; i < cp_len; i++) {
                int next_c = fgetc(f);
                if (next_c == EOF) {
                    fprintf(stderr, "Неочікуваний кінець файлу у UTF-8 послідовності\n");
                    fclose(f);
                    return 1;
                }
                buf[i] = (unsigned char)next_c;
            }

            // Декодуємо UTF-8 послідовність у Unicode codepoint
            int decoded_len = utf8_decode(buf, cp_len, &codepoint);
            if (decoded_len != cp_len) {
                fprintf(stderr, "Помилка декодування UTF-8\n");
                fclose(f);
                return 1;
            }

            // Фільтруємо і виводимо лише кириличні символи (U+0400–U+04FF)
            if (codepoint >= 0x0400 && codepoint <= 0x04FF) {
                // printf("0x%03X         | U+%04X\n", glyph_index, codepoint);
                printf("0x%03X         | U+%04X  | %.*s\n", glyph_index, codepoint, cp_len, buf);
            }
        }
    }

    // Закриваємо файл
    fclose(f);
    return 0;
}

